events
------
MousePostion(vMouseEvent As enmMouseEvent, vLongitude As Double, vLatitude As Double)
	* this event can be triggered by different 4 MouseEvents
	- CurrentPosition		: the current position when the mouse moves over the map
	- SelectionStartPosition	: left mousebutton was clicked and hold, MouseFunction was set at 1 - Zoom or 3 - Selection
	- DistanceStartPosition		: left mousebutton was clicked and hold, MouseFunction was set at 2 - Distance
	- ClickedPosition		: left mousebutton was clicked to point a location
	* vLongitude
	* vLatitude

SelectionCompleted(vLimitN As Double, vLimitO As Double, vLimitZ As Double, vLimitW As Double)
	* this event is triggered when MouseFunction was set at 1 - Zoom or 3 - Selection
	  and mouseUp occurs (but no zoom in or zoom out occurs yet)
	* vLimitN			: the top side of the rectangle in degrees
	* vLimitO 			: the right side of the rectangle in degrees
	* vLimitZ 			: the bottom side of the rectangle in degrees
	* vLimitW 			: the left side of the rectangle in degrees

DistanceCalculated(vDistance As Double, vLatitude1 As Double, vLongitude1 As Double, vLatitude2 As Double, vLongitude2 As Double)
	* this event is triggered when MouseFunction was set at 2 - Distance
	  and mouseUp occurs
	* vDistance			: the distance between the two coördinates
	* vLatitude1			: the lat. of the first clicked point 
	* vLongitude1 			: the long. of the first clicked point 
	* vLatitude2			: the lat. of the second clicked point 
	* vLongitude2 			: the long. of the second clicked point

ZoomError(vZoomError As enmZoomError)
	* this event is triggered when one of the following errors occur
	- North_South_Equal		: North and South may not be equal, otherwise no image would be displayed
	- East_West_Equal		: North and South may not be equal, otherwise no image would be displayed
	- East_SmallerThan_West		: East can not be smaller than West, since West is always left from East
	- North_SmallerThan_South	: North can not be smaller than South, since South is always under from North
	- ToMuchSteps			: The user tried to go back more steps in the zoomhistory than there are available
					  for example: he zoomed five times in, and wants to zoom out sixteen times
	- SelectionIgnored		: The selection with the mouse was smaller than SelectionRange specified

ZoomConfigured(vZoomdirection As enmZoomDirection)
	* this event occurs when the N, O, Z, W values are stored in order to zoom or to show
	  the map when the user opens the form.
	  At this point we will have to paint our points from our database
	  (see topic the basic thing)

MouseDownButton As Integer, Shift As Integer, X As Single, Y As Single)
	* just a forward of the basic MouseDown event
  
methods
-------
ZoomOut(Optional vStep As Byte = 1)
	* zooms vStep times out to previous N, O, Z, W values

ZoomIn(vLimitN As Double, vLimitO As Double, vLimitZ As Double, vLimitW As Double)
	* zooms in to specified Limits

DrawPoint(vLongitude As Double, vLatitude As Double)
	* draws a point on the map at specified coördinate

BreakLine()
	* when this method is called, no line will be drawn between the previous coördinate 
	  and the next one that is going to be drawn (is only applicable when using lines)

MapReload()
	* refresh the map with current data in files or stream

EndDraw()
	* tells the Drawloop to stop drawing

DrawPicture(vFileName As String, vWidth As Integer, vHeight As Integer, vLongitude As Double, 
vLatitude As Double, vNormalZoomWidth As Double, vNormalZoomHeight As Double)
	* draws a picture  vFileName with specified vWidth and vHeight at coördinate 
	  vLongitude and vLatitude vNormalZoomWidth and vNormalZoomHeight specify
					  
Carc_Distance_Tussen(vLatitude1 As Double, vLongitude1 As Double, vLatitude2 As Double, _
vLongitude2 As Double) As Double
	* calculates the distance between two coördinates
	  and reckons the curve from earth

Public Sub Navigate(vDirection As enmDirection, Optional vStep As Byte = 25)
	* moves the map to specified direction

DrawEquatorMeridian(vDrawEquatorMeridian As enmDrawEquatorMeridian)
	* draws the Equat or Meridian

attributes
----------
DrawColor	: COLOR, color of lines and points
DrawLines	: boolean, if true, all coördinates are connected if no breakline() was called
KeyNagivate	: boolean, if true, the arrow buttons can be used to navigate the map
LimitN		: double, specifies the default North Limit, this is also the maximum selection for zooming out
LimitO		: double, specifies the default East Limit, this is also the maximum selection for zooming out
LimitW		: double, specifies the default West Limit, this is also the maximum selection for zooming out
LimitZ		: double, specifies the default South Limit, this is also the maximum selection for zooming out
MapBackColor	: COLOR, just the backcolor
MouseFunction	: 0 - MouseZoom, 1 - MouseSelection, 2 - MouseDistance, specifies the mouseFunction
NagivateStep	: byte, specifies the how much (%) the map moves when it navigates
Redraw		: boolean, if true, the map will be stored in memory (slower) but you can see the selectionframe
		  and line and the map doesn't get wiped out when another window moves over the map
SelectionRange	: double, this is the amount of pixels that must be selected before the selection is accepted
		  as a valid Selection or ZoomSelection
SelectionRatio	: byte, the height is changed automatically if > 0, it will be changed with width * SelectionRatio



Now we know the functions, etc. we can things get to work
---------------------------------------------------------
the basic thing (just zooming in and out with the mouse selection)
------------------------------------------------------------------
* draw the control on your form and configure the attributes
  like they should be, when the form with the control is opened.
  in this example put MouseFunction at 0 - MouseZoom, DrawLines at true, and Redraw at true

* the event ZoomError(vZoomError As enmZoomError) should always be added,
  you may ommit some Errors in case if you don't use it

* add the event EasyMapDraw_SelectionCompleted(vSelectionEvent As prjEasyMapDraw.enmSelectionEvent, _
  vLimitN As Double, vLimitO As Double, vLimitZ As Double, vLimitW As Double) in the form
  when this occurs you can call ZoomIn(vLimitN, vLimitO, vLimitZ, vLimitW) if VSelectionEvent = ZoomSelection for example
  after calling ZoomIn() the event ZoomConfigured will be triggered automatically.
  if a zoom value was impossible, ZoomError will be triggered and ZoomConfigured will not be triggered

* ZoomConfigured(vZoomdirection As enmZoomDirection) is the most important event,
  when this occurs:
	- you have to open your file or inputstream
	- call DrawPoint() for every coördinate
	- calling DrawPoint() must be done in a loop, 
	  which loops while there are coördinates and IsDrawing is true
	- during this you may want to use breakLine() when drawing lines
	- IsDrawing must be in every loop you create there, so when the user
	  cancels or resizes the form, the loop(s) are stopped
	- after your loop(s) are done you must call EndDraw()

* call the method ZoomOut(CByte(numberstepsbackwards)) somewhere in your code to zoom out
  

summery of the Drawloop
-----------------------
here we use following important methods:
	- BreakLine()
	- DrawPoint()
	- EndDraw()
and the important attribute:
	- IsDrawing